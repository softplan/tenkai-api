// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	amqp "github.com/streadway/amqp"
	mock "github.com/stretchr/testify/mock"
)

// RabbitInterface is an autogenerated mock type for the RabbitInterface type
type RabbitInterface struct {
	mock.Mock
}

// CreateFanoutExchange provides a mock function with given fields: channel, name
func (_m *RabbitInterface) CreateFanoutExchange(channel *amqp.Channel, name string) error {
	ret := _m.Called(channel, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(*amqp.Channel, string) error); ok {
		r0 = rf(channel, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChannel provides a mock function with given fields: conn
func (_m *RabbitInterface) GetChannel(conn *amqp.Connection) *amqp.Channel {
	ret := _m.Called(conn)

	var r0 *amqp.Channel
	if rf, ok := ret.Get(0).(func(*amqp.Connection) *amqp.Channel); ok {
		r0 = rf(conn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amqp.Channel)
		}
	}

	return r0
}

// GetConnection provides a mock function with given fields: uri
func (_m *RabbitInterface) GetConnection(uri string) *amqp.Connection {
	ret := _m.Called(uri)

	var r0 *amqp.Connection
	if rf, ok := ret.Get(0).(func(string) *amqp.Connection); ok {
		r0 = rf(uri)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amqp.Connection)
		}
	}

	return r0
}

// GetConsumer provides a mock function with given fields: channel, queue, consumer, autoAck, exclusive, noLocal, noWait, args
func (_m *RabbitInterface) GetConsumer(channel *amqp.Channel, queue string, consumer string, autoAck bool, exclusive bool, noLocal bool, noWait bool, args amqp.Table) (<-chan amqp.Delivery, error) {
	ret := _m.Called(channel, queue, consumer, autoAck, exclusive, noLocal, noWait, args)

	var r0 <-chan amqp.Delivery
	if rf, ok := ret.Get(0).(func(*amqp.Channel, string, string, bool, bool, bool, bool, amqp.Table) <-chan amqp.Delivery); ok {
		r0 = rf(channel, queue, consumer, autoAck, exclusive, noLocal, noWait, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan amqp.Delivery)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*amqp.Channel, string, string, bool, bool, bool, bool, amqp.Table) error); ok {
		r1 = rf(channel, queue, consumer, autoAck, exclusive, noLocal, noWait, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Publish provides a mock function with given fields: channel, exchange, key, mandatory, immediate, msg
func (_m *RabbitInterface) Publish(channel *amqp.Channel, exchange string, key string, mandatory bool, immediate bool, msg amqp.Publishing) error {
	ret := _m.Called(channel, exchange, key, mandatory, immediate, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(*amqp.Channel, string, string, bool, bool, amqp.Publishing) error); ok {
		r0 = rf(channel, exchange, key, mandatory, immediate, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueueDeclare provides a mock function with given fields: channel, name, durable, autoDelete, exclusive, noWait, args
func (_m *RabbitInterface) QueueDeclare(channel *amqp.Channel, name string, durable bool, autoDelete bool, exclusive bool, noWait bool, args amqp.Table) (amqp.Queue, error) {
	ret := _m.Called(channel, name, durable, autoDelete, exclusive, noWait, args)

	var r0 amqp.Queue
	if rf, ok := ret.Get(0).(func(*amqp.Channel, string, bool, bool, bool, bool, amqp.Table) amqp.Queue); ok {
		r0 = rf(channel, name, durable, autoDelete, exclusive, noWait, args)
	} else {
		r0 = ret.Get(0).(amqp.Queue)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*amqp.Channel, string, bool, bool, bool, bool, amqp.Table) error); ok {
		r1 = rf(channel, name, durable, autoDelete, exclusive, noWait, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
