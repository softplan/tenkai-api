// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	model "github.com/softplan/tenkai-api/pkg/dbms/model"
	mock "github.com/stretchr/testify/mock"
)

// ValueRuleDAOInterface is an autogenerated mock type for the ValueRuleDAOInterface type
type ValueRuleDAOInterface struct {
	mock.Mock
}

// CreateValueRule provides a mock function with given fields: e
func (_m *ValueRuleDAOInterface) CreateValueRule(e model.ValueRule) (int, error) {
	ret := _m.Called(e)

	var r0 int
	if rf, ok := ret.Get(0).(func(model.ValueRule) int); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.ValueRule) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteValueRule provides a mock function with given fields: id
func (_m *ValueRuleDAOInterface) DeleteValueRule(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditValueRule provides a mock function with given fields: e
func (_m *ValueRuleDAOInterface) EditValueRule(e model.ValueRule) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.ValueRule) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListValueRules provides a mock function with given fields: variableRuleID
func (_m *ValueRuleDAOInterface) ListValueRules(variableRuleID int) ([]model.ValueRule, error) {
	ret := _m.Called(variableRuleID)

	var r0 []model.ValueRule
	if rf, ok := ret.Get(0).(func(int) []model.ValueRule); ok {
		r0 = rf(variableRuleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ValueRule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(variableRuleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
