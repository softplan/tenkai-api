// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	model "github.com/softplan/tenkai-api/pkg/dbms/model"
	mock "github.com/stretchr/testify/mock"
)

// ProductDAOInterface is an autogenerated mock type for the ProductDAOInterface type
type ProductDAOInterface struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: e
func (_m *ProductDAOInterface) CreateProduct(e model.Product) (int, error) {
	ret := _m.Called(e)

	var r0 int
	if rf, ok := ret.Get(0).(func(model.Product) int); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Product) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProductVersion provides a mock function with given fields: e
func (_m *ProductDAOInterface) CreateProductVersion(e model.ProductVersion) (int, error) {
	ret := _m.Called(e)

	var r0 int
	if rf, ok := ret.Get(0).(func(model.ProductVersion) int); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.ProductVersion) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProductVersionCopying provides a mock function with given fields: payload
func (_m *ProductDAOInterface) CreateProductVersionCopying(payload model.ProductVersion) (int, error) {
	ret := _m.Called(payload)

	var r0 int
	if rf, ok := ret.Get(0).(func(model.ProductVersion) int); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.ProductVersion) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProductVersionService provides a mock function with given fields: e
func (_m *ProductDAOInterface) CreateProductVersionService(e model.ProductVersionService) (int, error) {
	ret := _m.Called(e)

	var r0 int
	if rf, ok := ret.Get(0).(func(model.ProductVersionService) int); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.ProductVersionService) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: id
func (_m *ProductDAOInterface) DeleteProduct(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProductVersion provides a mock function with given fields: id
func (_m *ProductDAOInterface) DeleteProductVersion(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProductVersionService provides a mock function with given fields: id
func (_m *ProductDAOInterface) DeleteProductVersionService(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditProduct provides a mock function with given fields: e
func (_m *ProductDAOInterface) EditProduct(e model.Product) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Product) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditProductVersion provides a mock function with given fields: e
func (_m *ProductDAOInterface) EditProductVersion(e model.ProductVersion) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.ProductVersion) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditProductVersionService provides a mock function with given fields: e
func (_m *ProductDAOInterface) EditProductVersionService(e model.ProductVersionService) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.ProductVersionService) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListProductVersionServicesLatest provides a mock function with given fields: productID, productVersionID
func (_m *ProductDAOInterface) ListProductVersionServicesLatest(productID int, productVersionID int) ([]model.ProductVersionService, error) {
	ret := _m.Called(productID, productVersionID)

	var r0 []model.ProductVersionService
	if rf, ok := ret.Get(0).(func(int, int) []model.ProductVersionService); ok {
		r0 = rf(productID, productVersionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ProductVersionService)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(productID, productVersionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProductVersionsByID provides a mock function with given fields: id
func (_m *ProductDAOInterface) ListProductVersionsByID(id int) (*model.ProductVersion, error) {
	ret := _m.Called(id)

	var r0 *model.ProductVersion
	if rf, ok := ret.Get(0).(func(int) *model.ProductVersion); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductVersion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProducts provides a mock function with given fields:
func (_m *ProductDAOInterface) ListProducts() ([]model.Product, error) {
	ret := _m.Called()

	var r0 []model.Product
	if rf, ok := ret.Get(0).(func() []model.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProductsVersionServices provides a mock function with given fields: id
func (_m *ProductDAOInterface) ListProductsVersionServices(id int) ([]model.ProductVersionService, error) {
	ret := _m.Called(id)

	var r0 []model.ProductVersionService
	if rf, ok := ret.Get(0).(func(int) []model.ProductVersionService); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ProductVersionService)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProductsVersions provides a mock function with given fields: id
func (_m *ProductDAOInterface) ListProductsVersions(id int) ([]model.ProductVersion, error) {
	ret := _m.Called(id)

	var r0 []model.ProductVersion
	if rf, ok := ret.Get(0).(func(int) []model.ProductVersion); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ProductVersion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
